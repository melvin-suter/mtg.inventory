// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using mtg_inventory_backend.Models;

#nullable disable

namespace mtginventorybackend.Migrations
{
    [DbContext(typeof(DefaultDBContext))]
    [Migration("20221221212033_Refactor")]
    partial class Refactor
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DeckFolderCard", b =>
                {
                    b.Property<int>("CardsId")
                        .HasColumnType("integer");

                    b.Property<int>("DecksId")
                        .HasColumnType("integer");

                    b.HasKey("CardsId", "DecksId");

                    b.HasIndex("DecksId");

                    b.ToTable("DeckCards", (string)null);
                });

            modelBuilder.Entity("mtg_inventory_backend.Models.CardMetadata", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<List<string>>("Color_identity")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Colors")
                        .HasColumnType("text[]");

                    b.Property<string>("ImageUrl_Big")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl_Small")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Keywords")
                        .HasColumnType("text[]");

                    b.Property<string>("Lang")
                        .HasColumnType("text");

                    b.Property<string>("Layout")
                        .HasColumnType("text");

                    b.Property<string>("Mana_cost")
                        .HasColumnType("text");

                    b.Property<int?>("Mana_cost_total")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Oracle_text")
                        .HasColumnType("text");

                    b.Property<int?>("Power")
                        .HasColumnType("integer");

                    b.Property<int?>("Toughness")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.ToTable("CardMetadata", (string)null);
                });

            modelBuilder.Entity("mtg_inventory_backend.Models.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.ToTable("Collection", (string)null);
                });

            modelBuilder.Entity("mtg_inventory_backend.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.ToTable("Deck", (string)null);
                });

            modelBuilder.Entity("mtg_inventory_backend.Models.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasIndex("CollectionId");

                    b.ToTable("Folder", (string)null);
                });

            modelBuilder.Entity("mtg_inventory_backend.Models.FolderCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CardMetadataId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FolderId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasIndex("FolderId");

                    b.ToTable("FolderCard", (string)null);
                });

            modelBuilder.Entity("mtg_inventory_backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DeckFolderCard", b =>
                {
                    b.HasOne("mtg_inventory_backend.Models.FolderCard", null)
                        .WithMany()
                        .HasForeignKey("CardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mtg_inventory_backend.Models.Deck", null)
                        .WithMany()
                        .HasForeignKey("DecksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("mtg_inventory_backend.Models.Folder", b =>
                {
                    b.HasOne("mtg_inventory_backend.Models.Collection", null)
                        .WithMany("Folders")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Collection");
                });

            modelBuilder.Entity("mtg_inventory_backend.Models.FolderCard", b =>
                {
                    b.HasOne("mtg_inventory_backend.Models.Folder", null)
                        .WithMany("Cards")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Folder");
                });

            modelBuilder.Entity("mtg_inventory_backend.Models.Collection", b =>
                {
                    b.Navigation("Folders");
                });

            modelBuilder.Entity("mtg_inventory_backend.Models.Folder", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
